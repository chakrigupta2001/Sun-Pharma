# ====================================================================================
# Script Name   : Enabled_NotReporting_180Days.ps1
# Description   : Retrieves enabled computer accounts from multiple domains
#                 that have not reported (WhenChanged older than 180 days or missing).
#                 Uses nearest DC discovery, fallback to original DC,
#                 retry mechanism, and direct CSV append.
# Author        : Chakravarthi Pulikonda
# Created Date  : 15-04-2025
# Notes         : Structured similar to All Computers & Disabled 180 Days scripts.
# input Parameters: path(C://Temp),deomains(spil.com,spapl.com)
# ====================================================================================
 
# --- Define cutoff date for 180 days ---
$cutoffDate = (Get-Date).AddDays(-180)
 
# --- Define output file path with timestamp ---
$datetime = Get-Date -Format 'dd-MMM-yyyy_HHmmss'
$reportName = "Enabled_NotReporting_180Days_" + $datetime + ".csv"
$outputCsvPath = Join-Path -Path $inputMap.path -ChildPath $reportName
 
# --- Get list of domains from input reference table ---
$domainControllers = $inputMap.domains -split ','
 
# --- Initialize ordered dictionaries for per-domain and total counts ---
$computercounts = [ordered]@{}
$totalComputerCount = 0
 
# ====================================================================================
# Main Processing Loop - Iterate through each domain
# ====================================================================================
foreach ($domain in $domainControllers) {
    Write-Output "Processing domain: $domain"
 
    # --- Step 1: Discover nearest DC for the domain ---
    try {
        $nearestDC = (Get-ADDomainController -Discover -NextClosestSite -DomainName $domain).IPv4Address
        Write-Output "Nearest DC for $domain : $nearestDC"
    }
    catch {
        Write-Output "Failed to discover nearest DC for $domain. Skipping..."
        $computercounts[$domain] = "Discovery failed"
        continue
    }
 
    # --- Step 2: Initialize retry variables ---
    $connected = $false
    $startTime = Get-Date
    $dcToUse = $nearestDC  # Start with nearest DC
 
    # ====================================================================================
    # Step 3: Retry mechanism - Attempt connection for up to 10 minutes
    # ====================================================================================
    while ((Get-Date) -lt $startTime.AddMinutes(10) -and -not $connected) {
        try {
            # --- Step 4: Retrieve enabled computers not reporting for 180+ days or never logged in ---
            Get-ADComputer -Filter { Enabled -eq $true -and (WhenChanged -le $cutoffDate -or WhenChanged -notlike "*") } `
                -Server $dcToUse -Credential $concreds1 `
                -Properties Name, DNSHostName, IPv4Address, Enabled, LastLogonDate, LastLogonTimestamp, WhenCreated, WhenChanged, OperatingSystem, DistinguishedName, modifyTimeStamp |
                Select-Object `
                    @{Name="Domain";Expression={$domain}},
                    Name,
                    DNSHostName,
                    IPv4Address,
                    Enabled,
                    @{Name="WhenCreated";Expression={ if ($_.WhenCreated) { $_.WhenCreated.ToString("dd-MMM-yyyy HH:mm") } else { "" } }},
                    @{Name="WhenChanged";Expression={ if ($_.WhenChanged) { $_.WhenChanged.ToString("dd-MMM-yyyy HH:mm") } else { "" } }},
                    @{Name="ModifyTimeStamp";Expression={ if ($_.modifyTimeStamp) { $_.modifyTimeStamp.ToString("dd-MMM-yyyy HH:mm") } else { "" } }},
                    OperatingSystem,
                    DistinguishedName |
                Export-Csv -Append -NoTypeInformation -Path $outputCsvPath
 
            # --- Mark connection as successful ---
            $connected = $true
        }
        catch {
            Write-Output "Failed to connect to $dcToUse. Retrying..."
 
            # --- Step 5: Fallback to original DC if nearest DC fails ---
            if ($dcToUse -eq $nearestDC) {
                Write-Output "Falling back to original DC: $domain"
                $dcToUse = $domain
            }
 
            # --- Wait before retrying ---
            Start-Sleep -Seconds 60
        }
    }
 
    # --- Step 6: Handle failure after retries ---
    if (-not $connected) {
        $computercounts[$domain] = "Unable to connect"
        Write-Output "Failed to connect to $nearestDC after retries. Skipping..."
        continue
    }
 
    # --- Step 7: Count results for current domain ---
    $computers = Import-Csv -Path $outputCsvPath | Where-Object { $_.Domain -eq $domain }
    $computercounts[$domain] = $computers.Count
    $totalComputerCount += $computers.Count
}
 
# ====================================================================================
# Step 8: Convert counts to JSON for iWorkflow output
# ====================================================================================
$computerCountsJson = $computercounts | ConvertTo-Json -Compress
$totalComputerJson = $totalComputerCount | ConvertTo-Json -Compress
 
# ====================================================================================
# Step 9: Final Output - Pass results to iWorkflow
# ====================================================================================
if ($totalComputerCount -gt 0) {
    Write-Output "Details Saved | $reportName | $computerCountsJson | $totalComputerJson"
}
else {
    Write-Output "No Enabled computers have failed to report for 180 days across all domains | $computerCountsJson | $totalComputerJson"
}