// ==================================================
// Preprocessing Block
// ==================================================
path = RefDataQuery.from("UC_internal_Computer_accounts").where(RefDataCriteria.exp("key").equalTo("path")).execute()[0].value.trim()
inputMap.path = path
 
domain = RefDataQuery.from("UC_internal_Computer_accounts").where(RefDataCriteria.exp("key").equalTo("domain")).execute()[0].value.trim()
inputMap.domainName = domain
 
to = RefDataQuery.from("UC_internal_Computer_accounts").where(RefDataCriteria.exp("key").equalTo("emailto")).execute()[0].value.trim()
inputMap.emailTo = to
 
cc = RefDataQuery.from("UC_internal_Computer_accounts").where(RefDataCriteria.exp("key").equalTo("emailcc")).execute()[0].value.trim()
inputMap.emailCC = cc
 
internalemailto = RefDataQuery.from("UC_internal_Computer_accounts").where(RefDataCriteria.exp("key").equalTo("internalemails")).execute()[0].value.trim()
inputMap.internalemailTo = internalemailto
 
Domains = RefDataQuery.from("UC_internal_Computer_accounts").where(RefDataCriteria.exp("key").equalTo("Domains")).execute()[0].value.trim()
inputMap.Domains = Domains
 
def tz = TimeZone.getTimeZone("Asia/Kolkata")
def currentdate = new Date().format("dd-MMM-yy HH:mm:ss", tz)
inputMap.currentdate = currentdate
 
emailSubject = "SunPharma - AD Users - Accounts Status Report (60 Days)- "
inputMap.emailSubject = emailSubject + currentdate
 
emailbody2 = """<html>
<head>
<style>
body { font-family: Arial, sans-serif; font-size: 14px; color: #333; }
.container { padding: 10px; }
.highlight { font-weight: bold; color: #5bc0de; }
.footer { font-size: 12px; color: #777; margin-top: 20px; }
</style>
</head>
<body>
<div class="container">
<p>Dear User,</p>
<p>After scanning the Active Directory, <span class="highlight">no records</span> were found for:</p>
<ul>
<li>60 Days Disabled User Accounts</li>
<li>60 Days Inactive User Accounts</li>
</ul>
<p>All user accounts are active as per policy.</p>
<p>Thank you,<br>Team Ignio</p>
<p class="footer"><b>Note:</b> Auto-generated mail. Do not reply.</p>
</div>
</body>
</html>"""
inputMap.emailbody2 = emailbody2


// MAIN WORKFLOW BLOCK - IDENTICAL STRUCTURE TO COMPUTERS
init{
    AttachmentPath = inputMap.path
    domainName = inputMap.domainName
    emailTo = inputMap.emailTo
    emailCC = inputMap.emailCC
    internalemailTO = inputMap.internalemailTo
    emailSubject = inputMap.emailSubject
    emailBody2 = inputMap.emailbody2
    currentdate = inputMap.currentdate
    DomainNames = inputMap.Domains
    AttachmentNameDisabled = ""
    AttachmentNameInactive = ""
}
 
// Step 1: Get Disabled Users Report
step("getDisabledReport", StepType.ONFUNCTION) {
    Map<String, Object> EntityMapP = new HashMap<>()
    EntityMapP.put("Name", processMap.domainName)
    Set<String> EntityLabelsP = new HashSet<>()
    EntityLabelsP.add("ADDomain")
    EntityInstanceP = ceb.get(EntityLabelsP, EntityMapP)
    Entity = ceb.get(EntityInstanceP.getId(), EntityLabelsP)
 
    Entity.GetDisabledUsers60Days(path: processMap.AttachmentPath, Domains: processMap.DomainNames, ioutput: "getDisabledReport_output")
}
.to({ processMap.getDisabledReport_output.returnCode == 0 && processMap.getDisabledReport_output.outputStream.contains("Details Saved") }, "getEncodedFileDisabled")
.to({ processMap.getDisabledReport_output.returnCode == 0 && processMap.getDisabledReport_output.outputStream.contains("No Disabled users found") }, "getEnabledReport")
.to({ processMap.getDisabledReport_output.returnCode == 0 && processMap.getDisabledReport_output.outputStream.contains("unable to connect") }, "ConnectivityIssue")
.elseTo("ERROR")
 
// Step 2: Encode Disabled Report
step("getEncodedFileDisabled", StepType.ONFUNCTION) {
    processMap.AttachmentNameDisabled = processMap.getDisabledReport_output.filename
    subject.getEncodedFile(path: processMap.AttachmentPath, fileName: processMap.AttachmentNameDisabled, ioutput: "getEncodedFileDisabled_output")
}
.to({ processMap.getEncodedFileDisabled_output.returnCode == 0 }, "getEnabledReport")
.elseTo("ERROR")
 
// Step 3: Get Inactive Users Report (using getEnabledReport step name for parity)
step("getEnabledReport", StepType.ONFUNCTION) {
    Map<String, Object> EntityMapP = new HashMap<>()
    EntityMapP.put("Name", processMap.domainName)
    Set<String> EntityLabelsP = new HashSet<>()
    EntityLabelsP.add("ADDomain")
    EntityInstanceP = ceb.get(EntityLabelsP, EntityMapP)
    Entity = ceb.get(EntityInstanceP.getId(), EntityLabelsP)
 
    Entity.GetInactiveUsers60Days(path: processMap.AttachmentPath, Domains: processMap.DomainNames, ioutput: "getEnabledReport_output")
}
.to({ processMap.getEnabledReport_output.returnCode == 0 && processMap.getEnabledReport_output.outputStream.contains("Details Saved") }, "getEncodedFileEnabled")
.to({ processMap.getEnabledReport_output.returnCode == 0 && processMap.getEnabledReport_output.outputStream.contains("No Inactive users found") }, "Get File on Ignio")
.to({ processMap.getEnabledReport_output.returnCode == 0 && processMap.getEnabledReport_output.outputStream.contains("unable to connect") }, "ConnectivityIssue")
.elseTo("ERROR")
 
// Step 4: Encode Inactive Report (using getEncodedFileEnabled step name)
step("getEncodedFileEnabled", StepType.ONFUNCTION) {
    processMap.AttachmentNameEnabled = processMap.getEnabledReport_output.filename
    subject.getEncodedFile(path: processMap.AttachmentPath, fileName: processMap.AttachmentNameEnabled, ioutput: "getEncodedFileEnabled_output")
}
.to({ processMap.getEncodedFileEnabled_output.returnCode == 0 }, "Get File on Ignio")
.elseTo("ERROR")
 
// Step 5: Handle Reports (IDENTICAL to computer workflow)
step("Get File on Ignio", StepType.ONIGNIO) {
    boolean hasDisabledReport = processMap.getDisabledReport_output.outputStream.contains("Details Saved")
    boolean hasEnabledReport = processMap.getEnabledReport_output.outputStream.contains("Details Saved")
 
    if (hasDisabledReport && hasEnabledReport){
        // ... [EXACT SAME LOGIC AS COMPUTER WORKFLOW] ...
        
        processMap.DisabledZipContent = processMap.getEncodedFileDisabled_output.outputStream;
        processMap.EnabledZipContent = processMap.getEncodedFileEnabled_output.outputStream;
 
        def disabledZipFileBytes = org.codehaus.groovy.runtime.EncodingGroovyMethods.decodeBase64(processMap.DisabledZipContent);
        def enabledZipFileBytes = org.codehaus.groovy.runtime.EncodingGroovyMethods.decodeBase64(processMap.EnabledZipContent);
 
        def disabledZipFile = new File(processMap.AttachmentNameDisabled);
        def enabledZipFile = new File(processMap.AttachmentNameEnabled);
 
        def fos1 = new java.io.FileOutputStream(disabledZipFile);
        def fos2 = new java.io.FileOutputStream(enabledZipFile);
 
        fos1.write(disabledZipFileBytes);
        fos2.write(enabledZipFileBytes);
 
        fos1.close();
        fos2.close();
        
        def disabledZipFileSize= disabledZipFile.size()
        def enabledZipFileSize = enabledZipFile.size()
 
        def jsonSlurper = new groovy.json.JsonSlurper();
        def disabledComputerCountsMap = jsonSlurper.parseText(processMap.getDisabledReport_output.hashMap);
        def totalDisabledComputerCountMap = jsonSlurper.parseText(processMap.getDisabledReport_output.totalcounts);
        def enabledComputerCountsMap = jsonSlurper.parseText(processMap.getEnabledReport_output.hashMap);
        def totalEnabledComputerCountMap = jsonSlurper.parseText(processMap.getEnabledReport_output.totalcounts);
 
        date = processMap.currentdate;
        Mailbody = """<html>
            <head>
                <style>
                body { font-family: Arial, sans-serif; font-size: 14px; color: #333; }
                .container { padding: 10px; }
                .table-container { margin-top: 10px; }
                table { width: 50%; border-collapse: collapse; }
                th, td { border: 1px solid #ddd; padding: 8px; text-align: middle; }
                th { background-color: #f2f2f2; }
                .footer { font-size: 12px; color: #777; margin-top: 20px; }
                </style>
            </head>
        <body>
            <div class="container">
                <p>Dear User,</p>
                <p>ignio has generated the following reports on <strong>""" + date + """</strong>:</p>
                <ul>
                    <li><strong>Disabled Users Report more than 60 Days</strong></li>
                    <li><strong>Enabled Users but Not Reporting since 60 Days</strong></li>
                </ul>
                <p>Kindly find the attached reports.</p>
         
                <div class="table-container">
                    <table>
                        <tr>
                            <th>Domains</th>
                            <th>Disabled Users Report more than 60 Days</th>
                            <th>Enabled Users but Not Reporting since 60 Days</th>
                        </tr>
                        <!-- Dynamic rows will be inserted here -->
                        """;
                        disabledComputerCountsMap.each { domain, counts ->
                            Mailbody += '<tr>\n';
                            Mailbody += ' <td>' + domain + '</td>\n';
                            Mailbody += ' <td>' + counts + '</td>\n';
                            Mailbody += ' <td>' + enabledComputerCountsMap[domain] + '</td>\n';
                            Mailbody += '</tr>\n';
                        }
                            
                        Mailbody += """
                        <tr>
                                <th>Total</th>
                                <th>""" + totalDisabledComputerCountMap + """</th>
                                <th>""" + totalEnabledComputerCountMap + """</th>
                            </tr>
                    </table>
                </div>
                <br>
                <p>Thank you,<br><strong>Team Ignio</strong></p>
         
                <p class="footer"><b>Note:</b> This is an automatically generated mail. Please do not reply.</p>
            </div>
        </body>
        </html>"""
 
        def MAX_SIZE = 5000000L;
        
        if(disabledZipFileSize < MAX_SIZE & enabledZipFileSize < MAX_SIZE){
                org.springframework.web.multipart.MultipartFile[] filesForAttachment= new org.springframework.web.multipart.MultipartFile[2]
                org.springframework.web.multipart.MultipartFile[] multipartFileArray1=fileUtils.createMultiPartFileFromFile(disabledZipFile)
                filesForAttachment[0]=multipartFileArray1[0]
                org.springframework.web.multipart.MultipartFile[] multipartFileArray2=fileUtils.createMultiPartFileFromFile(enabledZipFile)
                filesForAttachment[1]=multipartFileArray2[0]
                iAction.Collaboration.SendMail(Body:Mailbody,Subject:processMap.emailSubject,To:processMap.emailTo,CC:processMap.emailCC,hasAttachment:filesForAttachment)
            }
 
        disabledZipFile.delete();
        enabledZipFile.delete();
        processMap.StepTwoOutput = 0;
    }
   /* else if (hasEnabledReport){
        // ... [EXACT SAME LOGIC AS COMPUTER WORKFLOW] ...
        
        processMap.EnabledZipContent = processMap.getEncodedFileEnabled_output.outputStream;
        def enabledZipFileBytes = org.codehaus.groovy.runtime.EncodingGroovyMethods.decodeBase64(processMap.EnabledZipContent);
        def enabledZipFile = new File(processMap.AttachmentNameEnabled);
        def fos2 = new java.io.FileOutputStream(enabledZipFile);
        fos2.write(enabledZipFileBytes);
        fos2.close();
        def enabledZipFileSize = enabledZipFile.size()
 
        def jsonSlurper = new groovy.json.JsonSlurper();
        def disabledComputerCountsMap = jsonSlurper.parseText(processMap.getDisabledReport_output.hashMap);
        def totalDisabledComputerCountMap = jsonSlurper.parseText(processMap.getDisabledReport_output.totalcounts);
        def enabledComputerCountsMap = jsonSlurper.parseText(processMap.getEnabledReport_output.hashMap);
        def totalEnabledComputerCountMap = jsonSlurper.parseText(processMap.getEnabledReport_output.totalcounts);
 
        date = processMap.currentdate;
        Mailbody = """<html>
        <body>
        Dear User,<br><br>
        ignio has generated the AD Users Status Report on """ + date + """. Kindly find the attached reports.
        <style>
        table th, td { border: 2px solid black; border-collapse: collapse; }
        th { background-color: #f2f2f2; }
        td { text-align: center; vertical-align: middle; }
        </style>
        <br><br><table style="width:50%">
        <tr>
        <th>Domains</th>
        <th>Disabled Computers</th>
        <th>Enabled Computers</th>
        </tr>""";
 
        disabledComputerCountsMap.each { domain, counts ->
            Mailbody += '<tr>\n';
            Mailbody += ' <td>' + domain + '</td>\n';
            Mailbody += ' <td>' + counts + '</td>\n';
            Mailbody += ' <td>' + enabledComputerCountsMap[domain] + '</td>\n';
            Mailbody += '</tr>\n';
        }
 
        Mailbody += """
                    <tr>
                            <th>Total</th>
                            <th>""" + totalDisabledComputerCountMap + """</th>
                            <th>""" + totalEnabledComputerCountMap + """</th>
                        </tr>
        </table>
        <br><br>Thank You,<br>Team ignio
        <br><br><b>Note: This is an automatically generated mail. Please do not reply.</b>
        </body>
        </html>"""
 
        def MAX_SIZE = 5000000L;
 
        if(enabledZipFileSize < MAX_SIZE){
            org.springframework.web.multipart.MultipartFile[] filesForAttachment= fileUtils.createMultiPartFileFromFile(enabledZipFile)
            iAction.Collaboration.SendMail(Body:Mailbody,Subject:processMap.emailSubject,To:processMap.emailTo,CC:processMap.emailCC,hasAttachment:filesForAttachment)
        }
        enabledZipFile.delete();
        processMap.StepFourOutput = 0;

    }
    else if (hasDisabledReport){
        // ... [EXACT SAME LOGIC AS COMPUTER WORKFLOW] ...
        
        processMap.DisabledZipContent = processMap.getEncodedFileDisabled_output.outputStream;
 
        def disabledZipFileBytes = org.codehaus.groovy.runtime.EncodingGroovyMethods.decodeBase64(processMap.DisabledZipContent);
        def disabledZipFile = new File(processMap.AttachmentNameDisabled);    
        def fos1 = new java.io.FileOutputStream(disabledZipFile);
        fos1.write(disabledZipFileBytes);
        fos1.close();
        def disabledZipFileSize= disabledZipFile.size()
 
        def jsonSlurper = new groovy.json.JsonSlurper();
        def disabledComputerCountsMap = jsonSlurper.parseText(processMap.getDisabledReport_output.hashMap);
        def totalDisabledComputerCountMap = jsonSlurper.parseText(processMap.getDisabledReport_output.totalcounts);
        def enabledComputerCountsMap = jsonSlurper.parseText(processMap.getEnabledReport_output.hashMap);
        def totalEnabledComputerCountMap = jsonSlurper.parseText(processMap.getEnabledReport_output.totalcounts);
 
        date = processMap.currentdate;
        Mailbody = """<html>
        <body>
        Dear User,<br><br>
        ignio has generated the AD Users Status Report on """ + date + """. Kindly find the attached reports.
        <style>
        table th, td { border: 2px solid black; border-collapse: collapse; }
        th { background-color: #f2f2f2; }
        td { text-align: center; vertical-align: middle; }
        </style>
        <br><br><table style="width:50%">
        <tr>
        <th>Domains</th>
        <th>Disabled Users</th>
        <th>Enabled Users</th>
        </tr>""";
 
        disabledComputerCountsMap.each { domain, counts ->
            Mailbody += '<tr>\n';
            Mailbody += ' <td>' + domain + '</td>\n';
            Mailbody += ' <td>' + counts + '</td>\n';
            Mailbody += ' <td>' + enabledComputerCountsMap[domain] + '</td>\n';
            Mailbody += '</tr>\n';
        }
 
        Mailbody += """
                    <tr>
                            <th>Total</th>
                            <th>""" + totalDisabledComputerCountMap + """</th>
                            <th>""" + totalEnabledComputerCountMap + """</th>
                        </tr>
        </table>
        <br><br>Thank You,<br>Team ignio
        <br><br><b>Note: This is an automatically generated mail. Please do not reply.</b>
        </body>
        </html>"""
 
        def MAX_SIZE = 5000000L;
        
        if(disabledZipFileSize < MAX_SIZE){
            org.springframework.web.multipart.MultipartFile[] filesForAttachment= fileUtils.createMultiPartFileFromFile(disabledZipFile)
            iAction.Collaboration.SendMail(Body:Mailbody,Subject:processMap.emailSubject,To:processMap.emailTo,CC:processMap.emailCC,hasAttachment:filesForAttachment)
        }
 
        disabledZipFile.delete();
        processMap.StepThreeOutput = 0;
    
    }*/
    else {
        processMap.StepFiveOutput = 0
    }
}
.to({ processMap.StepTwoOutput == 0 }, "SUCCESS")
/*.to({ processMap.StepThreeOutput == 0 }, "SUCCESS")
.to({ processMap.StepFourOutput == 0 }, "SUCCESS")*/
.to({ processMap.StepFiveOutput == 0 }, "noDisabledComputersReport")
.elseTo("ERROR")
 
// Step 6: Connectivity Issues (IDENTICAL)
step("ConnectivityIssue", StepType.ONIGNIO) {
    Mailbody = """Dear User,<br><br> Connectivity issue found in the AD Domain server while fetching the AD Users Status Report. <br>Kindly, look into it and generate the report manually. <br><br>Thank You,<br>Team Ignio <br><br><b>Note: This is an automatically generated mail. Please do not reply.</b>"""
 
    iAction.Collaboration.SendMail(Body: Mailbody, Subject: processMap.emailSubject, To: processMap.internalemailTo)
processMap.one = 0
}
.to({ processMap.one == 0 }, "SUCCESS")
.elseTo("ERROR")
 
// Step 7: No Reports (IDENTICAL except user terminology)
step("noDisabledComputersReport", StepType.ONIGNIO) {
    iAction.Collaboration.SendMail(Body: processMap.emailBody2, Subject: processMap.emailSubject, To: processMap.emailTo, CC: processMap.emailCC)
    processMap.StepSixOutput = 0
}
.to({ processMap.StepSixOutput == 0 }, "SUCCESS")
.elseTo("ERROR")
 
// End States (IDENTICAL)
end("SUCCESS", Status.SUCCESS) {
    outputMap << [outputStream: "Successfully sent the mail"]
}
 
end("ERROR", Status.ERROR) {
    outputMap << [outputStream: "Unable to send the mail"]
}