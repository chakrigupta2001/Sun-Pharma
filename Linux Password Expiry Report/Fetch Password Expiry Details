#!/bin/bash

:<<'COMMENT_BLOCK'
.SYNOPSIS
    Get password and account expiry information for all users with login shells on a Linux system.
.DESCRIPTION
    This script collects and formats password expiry, last password change, and account expiry dates for each user
    who has a login shell (bash or sh). It also calculates whether the password is expiring within 7 or 15 days,
    and determines the expiry status. The output is in CSV format and includes hostname, IP address, username,
    and expiry details. This data can be consumed by external tools like iWorkflow.
.PARAMETER None
    This script does not accept parameters. It is intended to be run directly on the host system.
.INPUTS
    System user account information via `getent passwd`
    Password and account expiry information via `chage`
.OUTPUTS
    CSV-formatted lines with the following fields:
    Hostname, IP Address, Username, Password Expiry Date, Last Password Change Date, Account Expiry Date,
    Expiring in 7 Days, Expiring in 15 Days, Expiry Status
.NOTES
  Version:        1.0
  Author:         Chakravarthy Pulikonda
  Creation Date:  31 July 2025
  Purpose/Change: Monitor user password expiry status for proactive account management
.EXAMPLE
    Example output:
    myhost,192.168.1.10,Karna.K,15-08-2025,01-07-2025,never,Yes,Yes,Not Expired
COMMENT_BLOCK

# Get the hostname of the system
HOSTNAME=$(hostname)

# Get the primary IP address of the system
IP_ADDRESS=$(hostname -I | awk '{print $1}')

# Get the current date in seconds since epoch (used for comparison)
TODAY=$(date +%s)
 
# Header will be handled by iWorkflow; script outputs data only
# The script outputs only data; headers are handled externally (e.g., by iWorkflow)

# Loop through all users with bash or sh as their login shell
getent passwd | awk -F: '$7 ~ /bash|sh/ { print $1 }' | while read -r user; do
    expiry_date=$(sudo chage -l "$user" 2>/dev/null | grep "Password expires" | cut -d: -f2 | sed 's/^[ \t]*//')
    last_change=$(sudo chage -l "$user" 2>/dev/null | grep "Last password change" | cut -d: -f2 | sed 's/^[ \t]*//')
    account_expiry=$(sudo chage -l "$user" 2>/dev/null | grep "Account expires" | cut -d: -f2 | sed 's/^[ \t]*//')
 
    # Handle permissions or empty values
    #expiry_date=${expiry_date:-"Permission Denied"}
    #last_change=${last_change:-"Permission Denied"}
    #account_expiry=${account_expiry:-"Permission Denied"}
    
    # Format to DD-MM-YYYY (if it's a valid date)
    expiry_date_fmt=$(date -d "$expiry_date" +'%d-%m-%Y' 2>/dev/null || echo "$expiry_date")
    last_change_fmt=$(date -d "$last_change" +'%d-%m-%Y' 2>/dev/null || echo "$last_change")
    account_expiry_fmt=$(date -d "$account_expiry" +'%d-%m-%Y' 2>/dev/null || echo "$account_expiry")
 
    # Calculate Expiry Flags
    # Initialize flags for password expiry within 7 and 15 days
    expiry_ts=$(date -d "$expiry_date" +%s 2>/dev/null)
    expiring_in_7="No"
    expiring_in_15="No"
    
    # If expiry date is valid, calculate days remaining and set flags
    if [[ "$expiry_ts" =~ ^[0-9]+$ ]]; then
        diff_days=$(( (expiry_ts - TODAY) / 86400 ))
        [[ $diff_days -le 7 && $diff_days -ge 0 ]] && expiring_in_7="Yes"
        [[ $diff_days -le 15 && $diff_days -ge 0 ]] && expiring_in_15="Yes"
    fi
    
    # Determine expiry status
    expiry_status=""
     
    # Normalize 'never' as not expiring
    if [[ "$expiry_date" == "never" ]]; then
        expiry_status="Not Expired"
    else
        expiry_ts=$(date -d "$expiry_date" +%s 2>/dev/null)
        if [[ "$expiry_ts" =~ ^[0-9]+$ ]]; then
            if (( expiry_ts < TODAY )); then
                expiry_status="Expired"
            else
                expiry_status="Not Expired"
            fi
        fi
    fi
    
    # Output the collected and computed information in CSV format
    echo "$HOSTNAME,$IP_ADDRESS,$user,$expiry_date_fmt,$last_change_fmt,$account_expiry_fmt,$expiring_in_7,$expiring_in_15,$expiry_status"
done
 